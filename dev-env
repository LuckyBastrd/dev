#!/usr/bin/env bash

# ===================================================================
# dev-env: üöÄ Entry point to set up your full development environment
# ===================================================================

# --------------------------------------
# Function: Check if a script exists
# --------------------------------------
script_exists() {
    [[ -f "$1" ]] && return 0 || { echo "‚ùå Error: Script '$1' not found!"; return 1; }
}

# --------------------------------------
# Function: Ask user to confirm an action
# --------------------------------------
ask_for_confirmation() {
    local message="$1"
    while true; do
        read -p "$message (y/n): " choice
        case "$choice" in
            [Yy]*) return 0 ;;
            [Nn]*) return 1 ;;
            *) echo "Invalid input. Please enter 'y' or 'n'." ;;
        esac
    done
}

# --------------------------------------
# Function: Detect OS
# --------------------------------------
detect_os() {
    case "$(uname -s)" in
        Linux*)   echo "Linux" ;;
        Darwin*)  echo "Mac" ;;
        *)        echo "UNKNOWN" ;;
    esac
}

# --------------------------------------
# Function: Install Homebrew (Mac only)
# --------------------------------------
bootstrap_brew() {
    if [[ "$1" != "Mac" ]]; then return; fi

    echo
    echo "====================================="
    echo "üç∫ Ensuring Homebrew is Installed"
    echo "====================================="

    if ! command -v brew &>/dev/null; then
        echo "‚ö†Ô∏è Homebrew is not installed."
        if ask_for_confirmation "Do you want to install Homebrew?"; then
            echo "üì¶ Installing Homebrew..."
            /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
            echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> ~/.zprofile
            eval "$(/opt/homebrew/bin/brew shellenv)"
        else
            echo "‚ùå Homebrew is required to install Ansible and Chezmoi. Exiting..."
            exit 1
        fi
    else
        echo "‚úÖ Homebrew already installed."
    fi
}

# --------------------------------------
# Function: Update git submodules
# --------------------------------------
git_update_submodules() {
    echo
    echo "====================================="
    echo "üîÑ Updating Git Submodules..."
    echo "====================================="

    if [ ! -d .git ]; then
        echo "‚ùå Error: Not a git repository."
        exit 1
    fi
    
    echo
    echo "------------------------------------------------------"
    echo "üì• Initializing and updating submodules recursively..."
    echo "------------------------------------------------------"
    echo

    git submodule update --init --recursive || {
        echo "‚ùå Failed to pull submodules."
        exit 1
    }

    local default_branch
    default_branch=$(git symbolic-ref refs/remotes/origin/HEAD 2>/dev/null | sed 's@^refs/remotes/origin/@@')

    if [ -n "$default_branch" ]; then
        git checkout "$default_branch" &>/dev/null && \
        echo "üìå Main repo checked out to '$default_branch'"
    fi

    echo
    echo "----------------------------------------------------------------------"
    echo "üîÅ Checking submodules for detached HEADs and fixing them if needed..."
    echo "----------------------------------------------------------------------"
    echo

    git submodule foreach '
        echo "üìÇ Entering $name"
        current_branch=$(git symbolic-ref --short HEAD 2>/dev/null)
        if [ -z "$current_branch" ]; then
            echo "‚ö†Ô∏è  Detached HEAD in $name. Attempting to check out main/master..."
            git checkout main 2>/dev/null || \
            git checkout master 2>/dev/null || \
            echo "‚ùå Failed to checkout a branch in $name"
        else
            echo "‚úÖ On branch $current_branch"
        fi
        echo
    '
}

# --------------------------------------
# Function: Run Ansible
# --------------------------------------
run_ansible() {
    echo
    echo "====================================="
    echo "üöÄ Running Dev Ansible Setup"
    echo "====================================="

    if ! command -v ansible &>/dev/null; then
        echo "‚ö†Ô∏è Ansible is not installed. It will be installed via Homebrew when script runs."
    fi

    local script_path="./dev-ansible/run-dev-ansible"
    if script_exists "$script_path"; then
        if ask_for_confirmation "Run Ansible setup?"; then
            bash "$script_path"
        else
            echo "‚è≠Ô∏è Skipping Ansible setup."
        fi
    fi
}

# --------------------------------------
# Function: Run Chezmoi
# --------------------------------------
run_chezmoi() {
    echo
    echo "====================================="
    echo "üöÄ Running Dev Dotfiles Setup"
    echo "====================================="

    if ! command -v chezmoi &>/dev/null; then
        echo "‚ö†Ô∏è Chezmoi is not installed. It will be installed via Homebrew when script runs."
    fi

    local script_path="./dev-dotfiles/run-dev-dotfiles"
    if script_exists "$script_path"; then
        if ask_for_confirmation "Run Chezmoi setup?"; then
            bash "$script_path"
        else
            echo "‚è≠Ô∏è Skipping Chezmoi setup."
        fi
    fi
}

# --------------------------------------
# Main Function
# --------------------------------------
main() {
    echo
    echo "==============================="
    echo "üß† Dev Environment Setup Start"
    echo "==============================="

    local os_type
    os_type=$(detect_os)
    echo "üì¶ Detected OS: $os_type"

    if [[ "$os_type" == "Mac" ]]; then
        bootstrap_brew "$os_type"
    else
        echo "‚ö†Ô∏è Skipping Homebrew bootstrap ‚Äî not macOS."
    fi

    git_update_submodules
    run_ansible
    run_chezmoi

    echo
    echo "==============================="
    echo "‚úÖ Dev Environment Ready!"
    echo "==============================="
}

# Invoke main
main
