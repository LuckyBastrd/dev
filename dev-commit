#!/usr/bin/env bash

set -e

AUTO_YES=false
if [[ "$1" == "--yes" ]]; then
  AUTO_YES=true
fi

echo "🧠 Starting commit & push process for submodules and dev root repo..."

echo ""
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "🔁 Step 1: Processing submodules..."
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

process_submodule() {
  local submodule_path="$1"
  cd "$submodule_path"

  echo ""
  echo "--------------------------------------------------"
  echo "📦 Processing submodule: $submodule_path"
  echo "--------------------------------------------------"

  if [ -d .git/rebase-apply ] || [ -d .git/rebase-merge ]; then
    echo "⚠️  Unfinished rebase detected in $submodule_path."
    echo "➡️  Run 'git rebase --continue' after resolving conflicts."
    exit 1
  fi

  STASHED=false
  if ! git diff --quiet || ! git diff --cached --quiet; then
    echo "🧺 Stashing local changes in $submodule_path..."
    git stash push -m "Auto-stash before rebase"
    STASHED=true
  fi

  echo "🔄 Rebasing from origin in $submodule_path..."
  git fetch origin
  if ! git rebase origin/$(git rev-parse --abbrev-ref HEAD); then
    echo "❌ Rebase failed in $submodule_path — resolve manually."
    exit 1
  fi

  if [ "$STASHED" = true ]; then
    echo "🔁 Reapplying stashed changes in $submodule_path..."
    git stash pop || echo "⚠️  Failed to pop stash in $submodule_path — resolve manually."
  fi

  echo "🔍 Checking for changes in $submodule_path..."
  if ! git diff --quiet || ! git diff --cached --quiet || [ -n "$(git ls-files --others --exclude-standard)" ]; then
    git add -A
    git commit -m "automated dev commit"
    echo "✅ Committed changes in $submodule_path"

    if $AUTO_YES; then
      echo "⬆️  Auto-pushing changes in $submodule_path..."
      git push || echo "❌ Push failed for $submodule_path"
    else
      read -p "❓ Push & keep commit in $submodule_path? (y/n): " confirm
      if [ "$confirm" = "y" ]; then
        echo "⬆️  Pushing changes in $submodule_path..."
        git push || echo "❌ Push failed for $submodule_path"
      else
        echo "❌ Skipping push. Resetting last commit in $submodule_path..."
        git reset --soft HEAD~1
      fi
    fi
  else
    echo "✅ No changes to commit in $submodule_path"
  fi

  echo "--------------------------------------------------"
  cd - > /dev/null
}

# Get submodule paths
SUBMODULES=$(git config --file .gitmodules --get-regexp path | awk '{ print $2 }')
for sub in $SUBMODULES; do
  process_submodule "$sub"
done

echo ""
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "🧠 Step 2: Processing root repo: dev/"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

REPO_ROOT=$(git rev-parse --show-toplevel)
cd "$REPO_ROOT" || exit 1

if [ -d .git/rebase-apply ] || [ -d .git/rebase-merge ]; then
  echo "⚠️  Unfinished rebase detected in dev/"
  echo "➡️  Run 'git rebase --continue' after resolving conflicts."
  exit 1
fi

STASHED=false
if ! git diff --quiet || ! git diff --cached --quiet; then
  echo "🧺 Stashing local changes in dev/..."
  git stash push -m "Auto-stash before rebase"
  STASHED=true
fi

echo "🔄 Rebasing from origin in dev/..."
git fetch origin
if ! git rebase origin/$(git rev-parse --abbrev-ref HEAD); then
  echo "❌ Rebase failed in dev/ — resolve manually."
  exit 1
fi

if [ "$STASHED" = true ]; then
  echo "🔁 Reapplying stashed changes in dev/..."
  git stash pop || echo "⚠️  Failed to pop stash in dev/ — resolve manually."
fi

echo "🔍 Checking for changes in dev/..."
if ! git diff --quiet || ! git diff --cached --quiet || [ -n "$(git ls-files --others --exclude-standard)" ]; then
  git add -A
  git commit -m "automated dev commit"
  echo "✅ Committed changes in dev/"

  if $AUTO_YES; then
    echo "⬆️  Auto-pushing changes in dev/..."
    git push || echo "❌ Push failed for dev/"
  else
    read -p "❓ Push & keep commit in dev/? (y/n): " confirm
    if [ "$confirm" = "y" ]; then
      echo "⬆️  Pushing changes in dev/..."
      git push || echo "❌ Push failed for dev/"
    else
      echo "❌ Skipping push. Resetting last commit in dev/..."
      git reset --soft HEAD~1
    fi
  fi
else
  echo "✅ No changes to commit in dev/"
fi

echo ""
echo "🎉 All done!"
